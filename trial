#!/bin/bash

export TOKENIZER='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'
export RepoURL='yakult13/foodsonly/main'
export DEBIAN_FRONTEND=noninteractive
export Proxy_Name='FCafeProxy'
export SSL_Name='FCafeSSL'
export SSH_Name='FCafeSSH'
export SSH_Port='225'
export SSL_SSH_Port='443'
export SSL_OVPN_Port='421'
export SSH_WS_Port='80'
export OVPN_WS_Port='81'

source /etc/os-release &>/dev/null
if [[ "${ID}" == 'debian' ]]; then
 D_REPOLINK="deb https://deb.debian.org/debian ${VERSION_CODENAME}-backports main contrib non-free"
elif [[ "${ID}" == 'ubuntu' ]]; then
 D_REPOLINK="deb http://archive.ubuntu.com/ubuntu/ ${VERSION_CODENAME}-backports main restricted universe multiverse"
else
 echo 'This script is only Available for Debian/Ubuntu linux distributions' && exit 1
fi

 # Enable TCP_BBR
 F1='/etc/modules-load.d/modules.conf' && { [[ $(grep -cE '^tcp_bbr$' $F1) -ge 1 ]] && echo "TCP_BBR already added" || echo "tcp_bbr" >> "$F1"; }
 modprobe tcp_bbr
 F2='net.core.default_qdisc' && F3='net.ipv4.tcp_congestion_control'
 sed -i "/^$F2.*/d;/^$F3.*/d" /etc/sysctl{.conf,.d/*.conf}
 echo -e "${F2}=fq\n${F3}=bbr" > /etc/sysctl.d/98-bbr.conf
 sysctl --system &>/dev/null

curlapi() {
 $(type -P curl) -Lk -q --retry 5 --retry-delay 10 --retry-max-time 60 -H "Authorization: token ${TOKENIZER}" -H "Accept: application/vnd.github.v3.raw" "$@"
}

OpenSSH(){
 SSH_Name_lc="$(echo ${SSH_Name}|tr '[:upper:]' '[:lower:]')"
 curlapi -s -o sshinstall "https://raw.githubusercontent.com/${RepoURL}/bin/sshinstall-${ID}"
 chmod +x sshinstall
 ./sshinstall && rm -f sshinstall
 curlapi -s -o /etc/banner "https://raw.githubusercontent.com/${RepoURL}/etc/banner"

 # Enter mod here
 sed -i "/^Subsystem.*/d" "/etc/${SSH_Name_lc}/etc/sshd_config"

 systemctl start ${SSH_Name_lc}
 systemctl enable ${SSH_Name_lc} &>/dev/null

 # BadVPN-UDPGW install
 curlapi -skLO "https://raw.githubusercontent.com/${RepoURL}/deb/badvpn-udpgw.deb"
 dpkg --force-all -i badvpn-udpgw.deb &>/dev/null
 rm -f badvpn-udpgw.deb
 systemctl daemon-reload
 systemctl start badvpn-udpgw 2>/dev/null
 systemctl enable badvpn-udpgw &>/dev/null
}

Stunnel(){
 SSL_Name_lc="$(echo ${SSL_Name}|tr '[:upper:]' '[:lower:]')"
 rm -rf /etc/${SSL_Name_lc}/*
 curlapi -s -o sslinstall "https://raw.githubusercontent.com/${RepoURL}/bin/sslinstall-${ID}"
 chmod +x sslinstall
 ./sslinstall && rm -f sslinstall
 for PORT in "${SSL_SSH_Port}" "${SSL_OVPN_Port}"; do { [ ! -z "$(lsof -ti:${PORT} -s tcp:listen)" ] && kill $(lsof -ti:${PORT}); }; done
 local A="/etc/${SSL_Name_lc}/etc/stunnel/stunnel.conf"
 local B="/etc/${SSL_Name_lc}/etc/stunnel/stunnel.pem"
 local C="/etc/${SSL_Name_lc}/var/stunnel.pid"
 echo "##Config
pid = ${C}
cert = ${B}
client = no
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
TIMEOUTclose = 0" > "${A}"
 for FP in "${SSH_Port}" "${OVPN_TCP_Port}"; do
  if [[ "${FP}" == "${SSH_Port}" ]]; then
  T="$(echo ${SSH_Name}|tr '[:upper:]' '[:lower:]')" && U="${SSL_SSH_Port}"
  else
  T="$(echo ${OVPN_Name}|tr '[:upper:]' '[:lower:]')" && U="${SSL_OVPN_Port}"
  fi
  if [[ ! -z "$(lsof -ti:${FP} -s tcp:listen)" ]]; then
  echo "[${T}]
accept = ${U}
connect = 127.0.0.1:${FP}" >> "${A}"
  fi
 done
 systemctl daemon-reload
 systemctl start ${SSL_Name_lc} &>/dev/null
 systemctl enable ${SSL_Name_lc} &>/dev/null
}

Squid(){
 Proxy_Name_lc="$(echo ${Proxy_Name}|tr '[:upper:]' '[:lower:]')"
 rm -rf /etc/${Proxy_Name_lc}/*
 apt build-dep squid -yf ${aptopt}

 curlapi -s -o proxyinstall "https://raw.githubusercontent.com/${RepoURL}/bin/proxyinstall-${ID}"
 chmod +x proxyinstall
 ./p
 }

 Wsproxy(){
 local L='/etc/systemd/system/wsproxy'
 rm -f "${L}-ssh.service" "${L}-ovpn.service"
 curlapi -s -o "${L}-ssh.service" "https://raw.githubusercontent.com/${RepoURL}/init/wsproxy.service"
 curlapi -s -o /usr/local/sbin/wsproxy "https://raw.githubusercontent.com/${RepoURL}/bin/wsproxy"
 chmod u+x /usr/local/sbin/wsproxy
 cp "${L}-ssh.service" "${L}-ovpn.service"
 sed -i "s/\(-port\s\).*\?\(-tunnel\s\).*\?/\1${SSH_WS_Port} \2127.0.0.1:${SSH_Port} /" "${L}-ssh.service"
 sed -i "s/\(-port\s\).*\?\(-tunnel\s\).*\?/\1${OVPN_WS_Port} \2127.0.0.1:${OVPN_TCP_Port} /" "${L}-ovpn.service"
 systemctl enable wsproxy-ssh wsproxy-ovpn &>/dev/null
 systemctl daemon-reload
 for PORT in "${SSH_WS_Port}" "${OVPN_WS_Port}"; do { [ ! -z "$(lsof -ti:${PORT} -s tcp:listen)" ] && kill $(lsof -ti:${PORT}); }; done
 systemctl start wsproxy-ssh wsproxy-ovpn
}

 apt install firewalld -y
 systemctl start firewalld
 systemctl enable firewalld
 firewall-cmd --quiet --set-default-zone=public
 firewall-cmd --quiet --zone=public --permanent --add-port=1-65534/tcp
 firewall-cmd --quiet --zone=public --permanent --add-port=1-65534/udp
 firewall-cmd --quiet --reload
 firewall-cmd --quiet --add-masquerade
 firewall-cmd --quiet --permanent --add-masquerade
 firewall-cmd --quiet --permanent --add-service=FCafeSSH
 firewall-cmd --quiet --permanent --add-service=openvpn
 firewall-cmd --quiet --permanent --add-service=http
 firewall-cmd --quiet --permanent --add-service=https
 firewall-cmd --quiet --permanent --add-service=FCafeSSL
 firewall-cmd --quiet --permanent --add-service=FCafeProxy
 firewall-cmd --quiet --reload
wget -q https://github.com/yakult13/OpenVPN/raw/main/OVPN && chmod +x OVPN && ./OVPN

OpenSSH
Stunnel
Squid
Wsproxy
