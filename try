#!/bin/bash
# VPS Installer
# Script by Juan
# 
# Illegal selling and redistribution of this script is strictly prohibited
# Please respect author's Property
# Binigay sainyo ng libre, ipamahagi nyo rin ng libre.
#
#

 # Now check if our machine is in root user, if not, this script exits
 # If you're on sudo user, run `sudo su -` first before running this script
if [[ $EUID -ne 0 ]];then
 ScriptMessage
 echo -e "[\e[1;31mError\e[0m] This script must be run as root, exiting..."
 exit 1
fi
MyScriptName='FreenetCafe'
SSH_Port1='22'
SSH_Port2='225'
SSH_Banner='https://github.com/yakult13/parte/raw/main/cafe'
Dropbear_Port1='550'
Dropbear_Port2='555'
Stunnel_Port1='443'
Stunnel_Port2='444'
Proxy_Port1='8080'
Proxy_Port2='8000'
OpenVPN_Port1='110'
OpenVPN_Port2='112'
OpenVPN_Port3='1194'
OpenVPN_Port4='25888'
Privoxy_Port1='8686'
Privoxy_Port2='8787'
OvpnDownload_Port='1998'
MyVPS_Time='Asia/Manila'

IPADDR="$(curl -4skL http://ipinfo.io/ip)"

function  Instupdate() {
export DEBIAN_FRONTEND=noninteractive
 apt-get update
 apt-get upgrade -y
 apt install fail2ban -y
 apt-get remove --purge ufw firewalld -y
 apt-get install nano wget curl zip unzip tar gzip p7zip-full bc rc openssl cron net-tools dnsutils dos2unix screen bzip2 ccrypt -y
 apt-get install dropbear stunnel4 privoxy ca-certificates nginx ruby apt-transport-https lsb-release squid screenfetch -y
 apt-get install perl libnet-ssleay-perl openssl libauthen-pam-perl libpam-runtime libio-pty-perl apt-show-versions python dbus libxml-parser-perl -y
 apt-get install shared-mime-info jq -y
 gem install lolcat
 apt-get autoremove -y
 echo "deb http://build.openvpn.net/debian/openvpn/stable $(lsb_release -sc) main" >/etc/apt/sources.list.d/openvpn.list && apt-key del E158C569 && wget -O - https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add -
 wget -qO security-openvpn-net.asc "https://keys.openpgp.org/vks/v1/by-fingerprint/F554A3687412CFFEBDEFE0A312F5F7B42F2B01E7" && gpg --import security-openvpn-net.asc
 apt-get update -y
 apt-get install openvpn -y
}

function InstWebmin(){
 WebminFile='http://prdownloads.sourceforge.net/webadmin/webmin_1.910_all.deb'
 wget -qO webmin.deb "$WebminFile"
 dpkg --install webmin.deb
 rm -rf webmin.deb
 sed -i 's|ssl=1|ssl=0|g' /etc/webmin/miniserv.conf
 systemctl restart webmin
}

function InstSSH(){
 rm -f /etc/ssh/sshd_config*
 cat <<'MySSHConfig' > /etc/ssh/sshd_config
# My OpenSSH Server config
Port myPORT1
Port myPORT2
AddressFamily inet
ListenAddress 0.0.0.0
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
PermitRootLogin yes
MaxSessions 1024
PubkeyAuthentication yes
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding yes
PrintMotd no
ClientAliveInterval 240
ClientAliveCountMax 2
UseDNS no
Banner /etc/banner
AcceptEnv LANG LC_*
Subsystem   sftp  /usr/lib/openssh/sftp-server
MySSHConfig

 sed -i "s|myPORT1|$SSH_Port1|g" /etc/ssh/sshd_config
 sed -i "s|myPORT2|$SSH_Port2|g" /etc/ssh/sshd_config

 rm -f /etc/banner
 wget -qO /etc/banner "$SSH_Banner"
 dos2unix -q /etc/banner

 sed -i '/password\s*requisite\s*pam_cracklib.s.*/d' /etc/pam.d/common-password
 sed -i 's/use_authtok //g' /etc/pam.d/common-password
 sed -i '/\/bin\/false/d' /etc/shells
 sed -i '/\/usr\/sbin\/nologin/d' /etc/shells
 echo '/bin/false' >> /etc/shells
 echo '/usr/sbin/nologin' >> /etc/shells
 
 systemctl restart ssh

 rm -rf /etc/default/dropbear*
 
 # creating dropbear config using cat eof tricks
 cat <<'MyDropbear' > /etc/default/dropbear
# My Dropbear Config
NO_START=0
DROPBEAR_PORT=PORT01
DROPBEAR_EXTRA_ARGS="-p PORT02"
DROPBEAR_BANNER="/etc/banner"
DROPBEAR_RSAKEY="/etc/dropbear/dropbear_rsa_host_key"
DROPBEAR_DSSKEY="/etc/dropbear/dropbear_dss_host_key"
DROPBEAR_ECDSAKEY="/etc/dropbear/dropbear_ecdsa_host_key"
DROPBEAR_RECEIVE_WINDOW=65536
MyDropbear

 # Now changing our desired dropbear ports
 sed -i "s|PORT01|$Dropbear_Port1|g" /etc/default/dropbear
 sed -i "s|PORT02|$Dropbear_Port2|g" /etc/default/dropbear
 
 # Restarting dropbear service
 systemctl restart dropbear
}

function InsStunnel(){
 StunnelDir=$(ls /etc/default | grep stunnel | head -n1)

 # Creating stunnel startup config using cat eof tricks
cat <<'MyStunnelD' > /etc/default/$StunnelDir
# My Stunnel Config
ENABLED=1
FILES="/etc/stunnel/*.conf"
OPTIONS="/etc/banner"
BANNER="/etc/banner"
PPP_RESTART=0
# RLIMITS="-n 4096 -d unlimited"
RLIMITS=""
MyStunnelD

 # Removing all stunnel folder contents
 rm -rf /etc/stunnel/*
 
 # Creating stunnel certifcate using openssl
 openssl req -new -x509 -days 9999 -nodes -subj "/C=PH/ST=NCR/L=Manila/O=$MyScriptName/OU=$MyScriptName/CN=$MyScriptName" -out /etc/stunnel/stunnel.pem -keyout /etc/stunnel/stunnel.pem &> /dev/null
##  > /dev/null 2>&1

 # Creating stunnel server config
 cat <<'MyStunnelC' > /etc/stunnel/stunnel.conf
# My Stunnel Config
pid = /var/run/stunnel.pid
cert = /etc/stunnel/stunnel.pem
client = no
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
TIMEOUTclose = 0

[dropbear]
accept = Stunnel_Port1
connect = 127.0.0.1:dropbear_port_c

[openssh]
accept = Stunnel_Port2
connect = 127.0.0.1:openssh_port_c
MyStunnelC

 # setting stunnel ports
 sed -i "s|Stunnel_Port1|$Stunnel_Port1|g" /etc/stunnel/stunnel.conf
 sed -i "s|dropbear_port_c|$(netstat -tlnp | grep -i dropbear | awk '{print $4}' | cut -d: -f2 | xargs | awk '{print $2}' | head -n1)|g" /etc/stunnel/stunnel.conf
 sed -i "s|Stunnel_Port2|$Stunnel_Port2|g" /etc/stunnel/stunnel.conf
 sed -i "s|openssh_port_c|$(netstat -tlnp | grep -i ssh | awk '{print $4}' | cut -d: -f2 | xargs | awk '{print $2}' | head -n1)|g" /etc/stunnel/stunnel.conf

 # Restarting stunnel service
 systemctl restart $StunnelDir

}

function InsOpenVPN(){
 # Checking if openvpn folder is accidentally deleted or purged
 if [[ ! -e /etc/openvpn ]]; then
  mkdir -p /etc/openvpn
 fi

 # Removing all existing openvpn server files
 rm -rf /etc/openvpn/*

 # Creating server.conf, ca.crt, server.crt and server.key
 cat <<'VPN1' > /etc/openvpn/server_tcp.conf
port MyOvpnPort1
proto tcp
dev tun
user nobody
group nogroup
persist-key
persist-tun
keepalive 10 120
topology subnet
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
push "redirect-gateway def1 bypass-dhcp"
server-ipv6 fd42:42:42:42::/112
tun-ipv6
push tun-ipv6
push "route-ipv6 2000::/3"
push "redirect-gateway ipv6"
compress lz4-v2
dh none
ecdh-curve secp521r1
tls-crypt tls-crypt.key
crl-verify crl.pem
ca ca.crt
cert FREENET_CAFE.crt
key FREENET_CAFE.key
auth SHA512
cipher AES-128-CBC
ncp-ciphers AES-128-CBC
tls-server
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
client-config-dir /etc/openvpn/ccd
status /var/log/openvpn/status.log
verb 3
VPN1

cat <<'VPN2' > /etc/openvpn/server_tcp1.conf
port MyOvpnPort2
proto tcp
dev tun
user nobody
group nogroup
persist-key
persist-tun
keepalive 10 120
topology subnet
server 10.9.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
push "redirect-gateway def1 bypass-dhcp"
server-ipv6 fd42:42:42:42::/112
tun-ipv6
push tun-ipv6
push "route-ipv6 2000::/3"
push "redirect-gateway ipv6"
compress lz4-v2
dh none
ecdh-curve secp521r1
tls-crypt tls-crypt.key
crl-verify crl.pem
ca ca.crt
cert FREENET_CAFE.crt
key FREENET_CAFE.key
auth SHA512
cipher AES-128-CBC
ncp-ciphers AES-128-CBC
tls-server
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
client-config-dir /etc/openvpn/ccd
status /var/log/openvpn/status.log
verb 3
VPN2

 cat <<'VPN3' > /etc/openvpn/server_udp.conf
port MyOvpnPort3
proto udp
dev tun
user nobody
group nogroup
persist-key
persist-tun
keepalive 10 120
topology subnet
server 10.11.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
push "redirect-gateway def1 bypass-dhcp"
server-ipv6 fd42:42:42:42::/112
tun-ipv6
push tun-ipv6
push "route-ipv6 2000::/3"
push "redirect-gateway ipv6"
compress lz4-v2
dh none
ecdh-curve secp521r1
tls-crypt tls-crypt.key
crl-verify crl.pem
ca ca.crt
cert FREENET_CAFE.crt
key FREENET_CAFE.key
auth SHA512
cipher AES-128-CBC
ncp-ciphers AES-128-CBC
tls-server
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
client-config-dir /etc/openvpn/ccd
status /var/log/openvpn/status.log
verb 3
VPN3

 cat <<'VPN4' > /etc/openvpn/server_udp1.conf
port MyOvpnPort4
proto udp
dev tun
user nobody
group nogroup
persist-key
persist-tun
keepalive 10 120
topology subnet
server 10.12.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
push "redirect-gateway def1 bypass-dhcp"
server-ipv6 fd42:42:42:42::/112
tun-ipv6
push tun-ipv6
push "route-ipv6 2000::/3"
push "redirect-gateway ipv6"
compress lz4-v2
dh none
ecdh-curve secp521r1
tls-crypt tls-crypt.key
crl-verify crl.pem
ca ca.crt
cert FREENET_CAFE.crt
key FREENET_CAFE.key
auth SHA512
cipher AES-128-CBC
ncp-ciphers AES-128-CBC
tls-server
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
client-config-dir /etc/openvpn/ccd
status /var/log/openvpn/status.log
verb 3
VPN4

 cat <<'CERT'> /etc/openvpn/ca.crt
-----BEGIN CERTIFICATE-----
MIICSjCCAaugAwIBAgIUbZiA1kylQt1/HPS801/Wdh0owqEwCgYIKoZIzj0EAwIw
FzEVMBMGA1UEAwwMRlJFRU5FVF9DQUZFMB4XDTIyMDQwNjE2MTA0MVoXDTMyMDQw
MzE2MTA0MVowFzEVMBMGA1UEAwwMRlJFRU5FVF9DQUZFMIGbMBAGByqGSM49AgEG
BSuBBAAjA4GGAAQAn0PKFZC0R7u4KBy9s+xAhoPhEHSKWqF90aj+vITYtpFtyAKv
OOVlBXWMdsMincP84dNgdHurgNoyaIgBx1Z7Js4BXUeMP/YNfucDAJUa0VRU6iBK
Al1B2ufHMstn3r72un7bLuyJnenYE5l2ARfky66Iz4snuZ0M8/g8+ue362x0jy2j
gZEwgY4wHQYDVR0OBBYEFOAxoYnVGKSFnIjQS8MMUkfepuhCMFIGA1UdIwRLMEmA
FOAxoYnVGKSFnIjQS8MMUkfepuhCoRukGTAXMRUwEwYDVQQDDAxGUkVFTkVUX0NB
RkWCFG2YgNZMpULdfxz0vNNf1nYdKMKhMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQD
AgEGMAoGCCqGSM49BAMCA4GMADCBiAJCAI7Dvhup9cwhvyyaivTeiDAKM0pHLPoa
KyQw3KJRsN+CXXxfzO854See3k97Kn9KbtpuWxUIf4dYk3jRRP9rdebuAkIA67xM
Bpi9vfXCDMzkKVAJeviTGoZGXOr4ln3iOsKJ2Q1XjpJJ2afEd6Srh7w1pc1V2qRF
SmlNTksBH6wPAWc2fuI=
-----END CERTIFICATE-----
CERT

 cat <<'SCERT'> /etc/openvpn/FREENET_CAFE.crt
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            43:c6:5a:25:5b:ba:ae:d8:d4:c6:c5:6f:aa:df:9f:cf
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: CN=FREENET_CAFE
        Validity
            Not Before: Apr  6 16:10:41 2022 GMT
            Not After : Jul  9 16:10:41 2024 GMT
        Subject: CN=FREENET_CAFE
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (521 bit)
                pub:
                    04:00:0a:e8:bc:7c:b7:9d:bf:12:b2:4b:e8:96:89:
                    58:45:ff:02:8f:6e:e4:58:4b:06:3c:e4:52:da:f9:
                    c2:2e:91:86:e8:3c:22:c9:cb:aa:2a:c3:3c:7a:3d:
                    8f:c3:96:01:b8:dc:cb:33:f1:9e:b2:60:9f:32:d4:
                    e7:98:1e:d6:55:d2:c8:00:3e:68:f5:75:f6:ed:d3:
                    24:c1:b5:af:74:7d:94:17:8e:4d:73:46:57:bb:b4:
                    03:7b:b0:0d:93:8e:75:79:7e:bc:73:d6:a5:ba:88:
                    8b:04:75:10:07:1a:49:a8:7c:4c:a6:1f:f3:a2:43:
                    1c:d4:dc:fb:ce:f3:34:99:6d:cb:68:d7:8f
                ASN1 OID: secp521r1
                NIST CURVE: P-521
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            X509v3 Subject Key Identifier: 
                CC:80:FC:75:F8:ED:98:D7:CC:D8:25:06:B8:CF:86:64:D8:FE:8E:AC
            X509v3 Authority Key Identifier: 
                keyid:E0:31:A1:89:D5:18:A4:85:9C:88:D0:4B:C3:0C:52:47:DE:A6:E8:42
                DirName:/CN=FREENET_CAFE
                serial:6D:98:80:D6:4C:A5:42:DD:7F:1C:F4:BC:D3:5F:D6:76:1D:28:C2:A1

            X509v3 Extended Key Usage: 
                TLS Web Server Authentication
            X509v3 Key Usage: 
                Digital Signature, Key Encipherment
            X509v3 Subject Alternative Name: 
                DNS:FREENET_CAFE
    Signature Algorithm: ecdsa-with-SHA256
         30:81:88:02:42:01:e5:28:26:70:9e:28:aa:a4:8c:53:fc:d5:
         b9:4f:76:cb:27:3c:73:1e:ea:85:9f:88:11:df:a2:cd:cd:a0:
         cd:6d:35:c9:7d:d4:f0:3d:17:56:e7:a6:f4:cd:6a:d2:86:16:
         7a:26:08:69:06:9b:27:16:18:24:4a:08:e9:6c:ab:43:9e:02:
         42:01:43:02:2c:a6:ae:5b:d1:1c:d1:05:5a:32:f8:15:09:c9:
         cf:8d:0d:c7:4c:c4:40:f1:90:df:21:68:63:83:af:3f:7c:47:
         7b:85:41:e7:a3:c3:cb:b1:0f:4b:c3:01:12:08:6e:d2:d5:e4:
         fe:92:d0:c5:8a:e2:30:07:89:2a:01:a5:d8
-----BEGIN CERTIFICATE-----
MIICcTCCAdKgAwIBAgIQQ8ZaJVu6rtjUxsVvqt+fzzAKBggqhkjOPQQDAjAXMRUw
EwYDVQQDDAxGUkVFTkVUX0NBRkUwHhcNMjIwNDA2MTYxMDQxWhcNMjQwNzA5MTYx
MDQxWjAXMRUwEwYDVQQDDAxGUkVFTkVUX0NBRkUwgZswEAYHKoZIzj0CAQYFK4EE
ACMDgYYABAAK6Lx8t52/ErJL6JaJWEX/Ao9u5FhLBjzkUtr5wi6Rhug8IsnLqirD
PHo9j8OWAbjcyzPxnrJgnzLU55ge1lXSyAA+aPV19u3TJMG1r3R9lBeOTXNGV7u0
A3uwDZOOdXl+vHPWpbqIiwR1EAcaSah8TKYf86JDHNTc+87zNJlty2jXj6OBvDCB
uTAJBgNVHRMEAjAAMB0GA1UdDgQWBBTMgPx1+O2Y18zYJQa4z4Zk2P6OrDBSBgNV
HSMESzBJgBTgMaGJ1RikhZyI0EvDDFJH3qboQqEbpBkwFzEVMBMGA1UEAwwMRlJF
RU5FVF9DQUZFghRtmIDWTKVC3X8c9LzTX9Z2HSjCoTATBgNVHSUEDDAKBggrBgEF
BQcDATALBgNVHQ8EBAMCBaAwFwYDVR0RBBAwDoIMRlJFRU5FVF9DQUZFMAoGCCqG
SM49BAMCA4GMADCBiAJCAeUoJnCeKKqkjFP81blPdssnPHMe6oWfiBHfos3NoM1t
Ncl91PA9F1bnpvTNatKGFnomCGkGmycWGCRKCOlsq0OeAkIBQwIspq5b0RzRBVoy
+BUJyc+NDcdMxEDxkN8haGODrz98R3uFQeejw8uxD0vDARIIbtLV5P6S0MWK4jAH
iSoBpdg=
-----END CERTIFICATE-----
SCERT

 cat <<'SKEY' > /etc/openvpn/FREENET_CAFE.key
-----BEGIN PRIVATE KEY-----
MIHuAgEAMBAGByqGSM49AgEGBSuBBAAjBIHWMIHTAgEBBEIB0kftWSk7fk9QWf40
I5GNW8l1b+rXIzxquTMxORTXk74e2vSdy5zV10SgBWqw+5ODQo1rIjgJJRZaozlc
p+UtbaShgYkDgYYABAAK6Lx8t52/ErJL6JaJWEX/Ao9u5FhLBjzkUtr5wi6Rhug8
IsnLqirDPHo9j8OWAbjcyzPxnrJgnzLU55ge1lXSyAA+aPV19u3TJMG1r3R9lBeO
TXNGV7u0A3uwDZOOdXl+vHPWpbqIiwR1EAcaSah8TKYf86JDHNTc+87zNJlty2jX
jw==
-----END PRIVATE KEY-----
SKEY

cat <<'TAK' > /etc/openvpn/tls-crypt.key
#
# 2048 bit OpenVPN static key
#
-----BEGIN OpenVPN Static key V1-----
233b99368168a30d7e6d72c742cd19c0
e5ec06ce38c5bd5e0f7be95a301eefb8
a232def3f54457632d61ff6a88d7ecaa
ba932832c533d5290fb7edeb97f58314
b6996ed261a2d2f36dff07e366416d71
3d1f68dcbfe806e107755f59d37a4631
a9bec9e5ebfad664e921371c476283bf
176006b95f1ec57260f9424ffdbcb4d3
b230bbad67888c192733f87f6076689b
cf83578af6de86c7ca4b8b6a847326c3
50c2bb0c7de7b63df38caf2883f14c8b
c12d51731a4c9ed2d1948ee8bad80cf3
788bf891f2c90517feeb370684d7cd87
b4bc66a97b6f7e02ad247aeae7d81c90
1b707694ddb1ca3dd52253ab0accf53c
ccbc66cd5beab2d401f1c31630ef1daa
-----END OpenVPN Static key V1-----
TAK

cat <<'clientkey' > /etc/openvpn/ckey.key
-----BEGIN ENCRYPTED PRIVATE KEY-----
MIIBSzBOBgkqhkiG9w0BBQ0wQTApBgkqhkiG9w0BBQwwHAQI/elG+FmXq2gCAggA
MAwGCCqGSIb3DQIJBQAwFAYIKoZIhvcNAwcECOuNsFz8Q6zoBIH4ZadHZcymbqUe
IiMHL+PIdx+26DqcdWnMCCYORfXhgfq79oNdZxS9pjaCkThWYFXi6URPSLK0F+27
1bDbO2F6pfst85w0QxpXQNATJ8ENCKtumJ+bJFSCDiJJ/jKA/BBmuUet45vZORtL
A1ttS7QMdu9mYl0MZsGTWmbZel8ohUaNUEM+rtpgJ2O9eO+gQqpQYsaKTYaVLpTH
ArBe712Ie8KneSnjmeIYR3oJ1MG6Z299y+tad5rMudXTrqmDgMBGL7vhO3qJMLBP
mmK40RQC5VAygSxLw8QzhHJpHKqEtu+aLo2NU/TZQfMjDkN/nRzg12+jHPyh+wo=
-----END ENCRYPTED PRIVATE KEY-----
clientkey

cat <<'clientcert' > /etc/openvpn/ccert.crt
-----BEGIN CERTIFICATE-----
MIICWDCCAbmgAwIBAgIQfuFTgOMqfzGuWU2t8XDOVTAKBggqhkjOPQQDAjAXMRUw
EwYDVQQDDAxGUkVFTkVUX0NBRkUwHhcNMjIwNDA2MTcwOTU1WhcNMjQwNzA5MTcw
OTU1WjAXMRUwEwYDVQQDDAxGcmVlbmV0X1VzZXIwgZswEAYHKoZIzj0CAQYFK4EE
ACMDgYYABACF8pTEZM0TR1Hbg8hiJuX+0T2Y1dbK0Ll57S6j4fGkVQhWB/gxoLx1
B8vtY7Kc4/BQOsf2GNdKm6cJfDxWWSezSAH0FQDpVyzxOvDCyCsLcIOU27J9Z1rY
zAzNO5dM8lHnTAeJhJ1k9ELMo78jOn0Q6tdnVb7NSkMOHPwbbVeEba89zqOBozCB
oDAJBgNVHRMEAjAAMB0GA1UdDgQWBBQfhdnuOCHLuldc0qSin5MLlWgQxzBSBgNV
HSMESzBJgBTgMaGJ1RikhZyI0EvDDFJH3qboQqEbpBkwFzEVMBMGA1UEAwwMRlJF
RU5FVF9DQUZFghRtmIDWTKVC3X8c9LzTX9Z2HSjCoTATBgNVHSUEDDAKBggrBgEF
BQcDAjALBgNVHQ8EBAMCB4AwCgYIKoZIzj0EAwIDgYwAMIGIAkIBcJTBeySH/jsz
jCW+141LiXCMh8wNHWljAys3fcZ+KtYl8F+6ALJhELO8EpmaAH8nGodfj86BcPCy
vuui5sACAvsCQgEckF07CMYZQG92ML9mWMchEQ/Vc5xLmc4nXkgIor7q0HKRDLF2
q1/2NGagoxvpQ2q0/FPnwOYwOB3+ldyXcQhAQw==
-----END CERTIFICATE-----
clientcert

cat <<'crl.pem' > /etc/openvpn/crl.pem
-----BEGIN X509 CRL-----
MIIBPDCBngIBATAKBggqhkjOPQQDAjAXMRUwEwYDVQQDDAxGUkVFTkVUX0NBRkUX
DTIyMDQwNjE2MTA0MVoXDTMyMDQwMzE2MTA0MVqgVjBUMFIGA1UdIwRLMEmAFOAx
oYnVGKSFnIjQS8MMUkfepuhCoRukGTAXMRUwEwYDVQQDDAxGUkVFTkVUX0NBRkWC
FG2YgNZMpULdfxz0vNNf1nYdKMKhMAoGCCqGSM49BAMCA4GMADCBiAJCAMpIatVZ
S58Ws/XNUNX56vd4fTggy4cKuaDxPFMRdfOgYLNIiDS6z6SG9zafDRV+jO4RLM6i
q24ptqf48RMgmiIBAkIA//4ufNS6nT/eTKfCDbFw3xg3gFKuWd40+HUJ2eE6/3qc
27LfuYIt3fNstNvbBzXQ28nv3sFdJv5Gn/Gn/rvzscE=
-----END X509 CRL-----
crl.pem

 # setting openvpn server port
 sed -i "s|MyOvpnPort1|$OpenVPN_Port1|g" /etc/openvpn/server_tcp.conf
 sed -i "s|MyOvpnPort2|$OpenVPN_Port2|g" /etc/openvpn/server_tcp1.conf
 sed -i "s|MyOvpnPort3|$OpenVPN_Port3|g" /etc/openvpn/server_udp.conf
 sed -i "s|MyOvpnPort4|$OpenVPN_Port4|g" /etc/openvpn/server_udp1.conf
 
 # Getting some OpenVPN plugins for unix authentication
 #wget -qO /etc/openvpn/b.zip 'https://github.com/imaPSYCHO/Parts/raw/main/openvpn_plugin64'
 #unzip -qq /etc/openvpn/b.zip -d /etc/openvpn
 #rm -f /etc/openvpn/b.zip
 
 # Some workaround for OpenVZ machines for "Startup error" openvpn service
 if [[ "$(hostnamectl | grep -i Virtualization | awk '{print $2}' | head -n1)" == 'openvz' ]]; then
 sed -i 's|LimitNPROC|#LimitNPROC|g' /lib/systemd/system/openvpn*
 systemctl daemon-reload
fi

 # Allow IPv4 Forwarding
 echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/20-openvpn.conf && sysctl --system &> /dev/null && echo 1 > /proc/sys/net/ipv4/ip_forward

 # Installing Firewalld
 apt install firewalld -y
 systemctl start firewalld
 systemctl enable firewalld
 firewall-cmd --quiet --set-default-zone=public
 firewall-cmd --quiet --zone=public --permanent --add-port=1-65534/tcp
 firewall-cmd --quiet --zone=public --permanent --add-port=1-65534/udp
 firewall-cmd --quiet --reload
 firewall-cmd --quiet --add-masquerade
 firewall-cmd --quiet --permanent --add-masquerade
 firewall-cmd --quiet --permanent --add-service=ssh
 firewall-cmd --quiet --permanent --add-service=openvpn
 firewall-cmd --quiet --permanent --add-service=http
 firewall-cmd --quiet --permanent --add-service=https
 firewall-cmd --quiet --permanent --add-service=privoxy
 firewall-cmd --quiet --permanent --add-service=squid
 firewall-cmd --quiet --reload
 
 # Enabling IPv4 Forwarding
 echo 1 > /proc/sys/net/ipv4/ip_forward

 
 # Starting OpenVPN server
 systemctl start openvpn@server_tcp
 systemctl start openvpn@server_tcp1
 systemctl start openvpn@server_udp
 systemctl start openvpn@server_udp1
 systemctl enable openvpn@server_tcp
 systemctl enable openvpn@server_tcp1
 systemctl enable openvpn@server_udp
 systemctl enable openvpn@server_udp1
 systemctl restart openvpn@server_tcp
 systemctl restart openvpn@server_tcp1
 systemctl restart openvpn@server_udp
 systemctl restart openvpn@server_udp1
}

function InsProxy(){
 # Removing Duplicate privoxy config
 rm -rf /etc/privoxy/config*
 
 # Creating Privoxy server config using cat eof tricks
 cat <<'myPrivoxy' > /etc/privoxy/config
# My Privoxy Server Config
user-manual /usr/share/doc/privoxy/user-manual
confdir /etc/privoxy
logdir /var/log/privoxy
filterfile default.filter
logfile logfile
listen-address 0.0.0.0:Privoxy_Port1
listen-address 0.0.0.0:Privoxy_Port2
toggle 1
enable-remote-toggle 0
enable-remote-http-toggle 0
enable-edit-actions 0
enforce-blocks 0
buffer-limit 4096
enable-proxy-authentication-forwarding 1
forwarded-connect-retries 1
accept-intercepted-requests 1
allow-cgi-request-crunching 1
split-large-forms 0
keep-alive-timeout 5
tolerate-pipelining 1
socket-timeout 300
permit-access 0.0.0.0/0 IP-ADDRESS
myPrivoxy

 # Setting machine's IP Address inside of our privoxy config(security that only allows this machine to use this proxy server)
 sed -i "s|IP-ADDRESS|$IPADDR|g" /etc/privoxy/config
 
 # Setting privoxy ports
 sed -i "s|Privoxy_Port1|$Privoxy_Port1|g" /etc/privoxy/config
 sed -i "s|Privoxy_Port2|$Privoxy_Port2|g" /etc/privoxy/config

 # I'm setting Some Squid workarounds to prevent Privoxy's overflowing file descriptors that causing 50X error when clients trying to connect to your proxy server(thanks for this trick @homer_simpsons)
 apt remove --purge squid -y
 rm -rf /etc/squid/sq*
 apt install squid -y
 
# Squid Ports (must be 1024 or higher)

 cat <<mySquid > /etc/squid/squid.conf
acl VPN dst $(wget -4qO- http://ipinfo.io/ip)/32
http_access allow VPN
http_access deny all 
http_port 0.0.0.0:$Proxy_Port1
http_port 0.0.0.0:$Proxy_Port2
coredump_dir /var/spool/squid
dns_nameservers 1.1.1.1 1.0.0.1
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern . 0 20% 4320
visible_hostname localhost
mySquid

 sed -i "s|SquidCacheHelper|$Proxy_Port1|g" /etc/squid/squid.conf
 sed -i "s|SquidCacheHelper|$Proxy_Port2|g" /etc/squid/squid.conf

sudo apt install ziproxy
 cat <<myziproxy > /etc/ziproxy/ziproxy.conf
 Port = 2898
 UseContentLength = false
 ImageQuality = {30,25,25,20}
myziproxy

 # Starting Proxy server
 echo -e "Restarting proxy server.."
 systemctl restart privoxy
 systemctl restart squid
 systemctl restart ziproxy
}

function OvpnConfigs(){
 # Creating nginx config for our ovpn config downloads webserver
 cat <<'myNginxC' > /etc/nginx/conf.d/bonveio-ovpn-config.conf
# My OpenVPN Config Download Directory
server {
 listen 0.0.0.0:myNginx;
 server_name localhost;
 root /var/www/openvpn;
 index index.html;
}
myNginxC

 # Setting our nginx config port for .ovpn download site
 sed -i "s|myNginx|$OvpnDownload_Port|g" /etc/nginx/conf.d/bonveio-ovpn-config.conf

 # Removing Default nginx page(port 80)
 rm -rf /etc/nginx/sites-*

 # Creating our root directory for all of our .ovpn configs
 rm -rf /var/www/openvpn
 mkdir -p /var/www/openvpn

 # Now creating all of our OpenVPN Configs 
cat <<EOF152 > /var/www/openvpn/GStories.ovpn
client
dev tun
proto tcp
remote $IPADDR $OpenVPN_Port1
http-proxy $(curl -s http://ipinfo.io/ip || wget -q http://ipinfo.io/ip) $Proxy_Port1
explicit-exit-notify
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
verify-x509-name FREENET_CAFE name
auth SHA512
auth-nocache
cipher AES-128-CBC
tls-client
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
ignore-unknown-option block-outside-dns
setenv opt block-outside-dns # Prevent Windows 10 DNS leak
verb 3
compress lz4-v2
http-proxy-option AGENT Chrome/80.0.3987.87
http-proxy-option CUSTOM-HEADER CONNECT HTTP/1.0
http-proxy-option CUSTOM-HEADER Host vt.tiktok.com
http-proxy-option CUSTOM-HEADER X-Forward-Host vt.tiktok.com
http-proxy-option CUSTOM-HEADER X-Forwarded-For vt.tiktok.com
http-proxy-option CUSTOM-HEADER Referrer vt.tiktok.com

<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/ccert.crt)
</cert>
<key>
$(cat /etc/openvpn/ckey.key)
</key>
<tls-crypt>
$(cat /etc/openvpn/tls-crypt.key)
</tls-crypt>
EOF152

cat <<EOF16 > /var/www/openvpn/WildRift.ovpn
client
dev tun
proto tcp
remote $IPADDR $OpenVPN_Port2
explicit-exit-notify
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
verify-x509-name FREENET_CAFE name
auth SHA512
auth-nocache
cipher AES-128-CBC
tls-client
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
ignore-unknown-option block-outside-dns
setenv opt block-outside-dns # Prevent Windows 10 DNS leak
verb 3
compress lz4-v2
push "socket-flags TCP_NODELAY"
push "dhcp-option DNS 1.0.0.1"
push "dhcp-option DNS 1.1.1.1"
push "dhcp-option DNS 8.8.4.4"
push "dhcp-option DNS 8.8.8.8"
http-proxy $(curl -s http://ipinfo.io/ip || wget -q http://ipinfo.io/ip) $Proxy_Port2
http-proxy-option AGENT Chrome/80.0.3987.87
http-proxy-option CUSTOM-HEADER CONNECT HTTP/1.0
http-proxy-option CUSTOM-HEADER "Host: mobile.garena.my"
http-proxy-option CUSTOM-HEADER "X-Online-Host: mobile.garena.my"
http-proxy-option CUSTOM-HEADER "X-Forward-Host: mobile.garena.my"
http-proxy-option CUSTOM-HEADER "Connection: Keep-Alive"

<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/ccert.crt)
</cert>
<key>
$(cat /etc/openvpn/ckey.key)
</key>
<tls-crypt>
$(cat /etc/openvpn/tls-crypt.key)
</tls-crypt>
EOF16

cat <<EOF18 > /var/www/openvpn/GGames.ovpn
client
dev tun
proto tcp
remote $IPADDR $OpenVPN_Port1
explicit-exit-notify
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
verify-x509-name FREENET_CAFE name
auth SHA512
auth-nocache
cipher AES-128-CBC
tls-client
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
ignore-unknown-option block-outside-dns
setenv opt block-outside-dns # Prevent Windows 10 DNS leak
verb 3
compress lz4-v2
http-proxy $(curl -s http://ipinfo.io/ip || wget -q http://ipinfo.io/ip) $Proxy_Port1
http-proxy-option AGENT Chrome/80.0.3987.87
http-proxy-option CUSTOM-HEADER CONNECT HTTP/1.0
http-proxy-option CUSTOM-HEADER "Host: c3cdn.ml.youngjoygame.com"
http-proxy-option CUSTOM-HEADER "X-Online-Host: c3cdn.ml.youngjoygame.com"
http-proxy-option CUSTOM-HEADER "X-Forward-Host: c3cdn.ml.youngjoygame.com"
http-proxy-option CUSTOM-HEADER "Connection: Keep-Alive"

<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/ccert.crt)
</cert>
<key>
$(cat /etc/openvpn/ckey.key)
</key>
<tls-crypt>
$(cat /etc/openvpn/tls-crypt.key)
</tls-crypt>
EOF18

cat <<EOF601 > /var/www/openvpn/GVideo.ovpn
client
dev tun
proto tcp
remote $IPADDR $OpenVPN_Port1
explicit-exit-notify
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
verify-x509-name FREENET_CAFE name
auth SHA512
auth-nocache
cipher AES-128-CBC
tls-client
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
ignore-unknown-option block-outside-dns
setenv opt block-outside-dns # Prevent Windows 10 DNS leak
verb 3
compress lz4-v2
http-proxy $(curl -s http://ipinfo.io/ip || wget -q http://ipinfo.io/ip) $Proxy_Port1
http-proxy-option AGENT Chrome/80.0.3987.87
http-proxy-option CUSTOM-HEADER CONNECT HTTP/1.0
http-proxy-option CUSTOM-HEADER "Host: staging.iwant.ph"
http-proxy-option CUSTOM-HEADER "X-Online-Host: staging.iwant.ph"
http-proxy-option CUSTOM-HEADER "X-Forward-Host: staging.iwant.ph"
http-proxy-option CUSTOM-HEADER "Connection: Keep-Alive"

<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/ccert.crt)
</cert>
<key>
$(cat /etc/openvpn/ckey.key)
</key>
<tls-crypt>
$(cat /etc/openvpn/tls-crypt.key)
</tls-crypt>
EOF601

cat <<EOF600 > /var/www/openvpn/GTM.ovpn
client
dev tun
proto tcp
remote $IPADDR $OpenVPN_Port1
explicit-exit-notify
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
verify-x509-name FREENET_CAFE name
auth SHA512
auth-nocache
cipher AES-128-CBC
tls-client
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
ignore-unknown-option block-outside-dns
setenv opt block-outside-dns # Prevent Windows 10 DNS leak
verb 3
compress lz4-v2
push "socket-flags TCP_NODELAY"
push "dhcp-option DNS 1.0.0.1"
push "dhcp-option DNS 1.1.1.1"
push "dhcp-option DNS 8.8.4.4"
push "dhcp-option DNS 8.8.8.8"
http-proxy $(curl -s http://ipinfo.io/ip || wget -q http://ipinfo.io/ip) $Proxy_Port1
http-proxy-option AGENT Chrome/80.0.3987.87
http-proxy-option CUSTOM-HEADER CONNECT HTTP/1.0
http-proxy-option CUSTOM-HEADER "Host: redirect.googlevideo.com"
http-proxy-option CUSTOM-HEADER "X-Online-Host: redirect.googlevideo.com"
http-proxy-option CUSTOM-HEADER "X-Forward-Host: redirect.googlevideo.com"
http-proxy-option CUSTOM-HEADER "Connection: Keep-Alive"

<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/ccert.crt)
</cert>
<key>
$(cat /etc/openvpn/ckey.key)
</key>
<tls-crypt>
$(cat /etc/openvpn/tls-crypt.key)
</tls-crypt>
EOF600

cat <<EOF160 > /var/www/openvpn/UDP_1194.ovpn
client
dev tun
proto udp
remote $IPADDR $OpenVPN_Port3
explicit-exit-notify
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
verify-x509-name FREENET_CAFE name
auth SHA512
auth-nocache
cipher AES-128-CBC
tls-client
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
ignore-unknown-option block-outside-dns
setenv opt block-outside-dns # Prevent Windows 10 DNS leak
verb 3
compress lz4-v2

<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/ccert.crt)
</cert>
<key>
$(cat /etc/openvpn/ckey.key)
</key>
<tls-crypt>
$(cat /etc/openvpn/tls-crypt.key)
</tls-crypt>
EOF160

cat <<EOF17 > /var/www/openvpn/UDP_25888.ovpn
client
dev tun
proto udp
remote $IPADDR $OpenVPN_Port4
explicit-exit-notify
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
verify-x509-name FREENET_CAFE name
auth SHA512
auth-nocache
cipher AES-128-CBC
tls-client
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
ignore-unknown-option block-outside-dns
setenv opt block-outside-dns # Prevent Windows 10 DNS leak
verb 3
compress lz4-v2

<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/ccert.crt)
</cert>
<key>
$(cat /etc/openvpn/ckey.key)
</key>
<tls-crypt>
$(cat /etc/openvpn/tls-crypt.key)
</tls-crypt>
EOF17


cat <<NOTE > /var/www/openvpn/ENJOY.txt
        **ENJOY AND HAVE FUN**
   <3 THANK YOU FOR THE SUPPORT <3
     ## HOPE YOU WILL BE ABLE ##
> TO SEE THE TRICK IN OUR NEW CONFIG <
NOTE

 # Creating OVPN download site index.html
cat <<'mySiteOvpn' > /var/www/openvpn/index.html
<!DOCTYPE html>
<html lang="en">
<!-- GVPNHUB CONF SITE -->
<head>
<meta charset="utf-8" />
<title>FREENET OVPN</title>
<meta name="description" content="This site is made only for GVPNHUB CONF's and are NOT FOR SALE" />
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport" />
<meta name="theme-color" content="#000000" />
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css">
<link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.8.3/css/mdb.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
</head>
<body style="background-image: linear-gradient(to right, #6f9ee8, #427bd4, #195bc2)">
<div class="container justify-content-center>
    <div class="col-md">
        <div class="view" style="margin-top:3em;margin-bottom:3em;">
                <center>
                    <img class="w3-circle" src="https://github.com/yakult13/parte/raw/main/cafe%20(1).png" width="250px" height="250px" class="card-img-top">
                </center>
        </div>
    <div class="card">
        <div class="card-body">
            <h5 class="card-title"><center><b><3 THANK YOU FREENET USERS <3</b></center></h5>
            <br>
            <ul class="list-group">
                <li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;">
                    <p>Note
                        <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span>
                        <br>
                        <small>ZIP FILE</small>
                    </p>
                    <a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/OVPN.zip" style="float:right;"><i class="fa fa-download"></i> Download</a>
                </li>
                <li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;">
                    <p> GTM
                        <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span>
                        <br>
                        <small>WNP/SNS/FUNALIW</small>
                    </p>
                    <a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/GTM.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a>
                </li>
                <li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;">
                   <p>UDP
                        <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span>
                        <br>
                        
                   </p>
                    <a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/UDP_1194.ovpn" style="float:right;"><i class="fa fa-download"></i> 1194</a>
                
                    <a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/UDP_25888.ovpn" style="float:right;"><i class="fa fa-download"></i> 25888</a>
                </li>
                <li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;">
                    <p>Smart
                        <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span>
                        <br>
                        <small>Giga Promos</small>
                    </p>
                    <a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/GGames.ovpn" style="float:right;"><i class="fa fa-download"></i> Games/Ml</a>
                    <a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/WildRift.ovpn" style="float:right;"><i class="fa fa-download"></i> Games/WR</a>                        
                 
                    <a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/GStories.ovpn" style="float:right;"><i class="fa fa-download"></i> Stories</a>                        
                 
                    <a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/GVideo.ovpn" style="float:right;"><i class="fa fa-download"></i> Video</a>
                </li>
                
            </ul>
        </div>
        </div>   
    </div>
    <br>
    </div>
</body>
</html>
mySiteOvpn
 
 # Setting template's correct name,IP address and nginx Port
 sed -i "s|MyScriptName|$MyScriptName|g" /var/www/openvpn/index.html
 sed -i "s|NGINXPORT|$OvpnDownload_Port|g" /var/www/openvpn/index.html
 sed -i "s|IP-ADDRESS|$IPADDR|g" /var/www/openvpn/index.html

 # Restarting nginx service
 systemctl restart nginx
 
 # Creating all .ovpn config archives
 cd /var/www/openvpn 
 zip -qq -r OVPN.zip *.ovpn *.txt
 cd
}

function ConfStartup(){
 # Daily reboot time of our machine
 # For cron commands, visit https://crontab.guru
 timedatectl set-timezone Asia/Manila
     #write out current crontab
     crontab -l > mycron
     #echo new cron into cron file
     echo -e "0 3 * * * /sbin/reboot >/dev/null 2>&1" >> mycron
     echo -e "*/1 * * * * sudo service ziproxy restart" >> mycron
     echo -e "0 */1 * * * /sbin/sysctl -p >/dev/null 2>&1" >> mycron
     echo -e "0 */1 * * * sysctl -p" >> mycron
     #install new cron file
     crontab mycron
     service cron restart
     echo '0 3 * * * /sbin/reboot >/dev/null 2>&1' >> /etc/cron.d/mycron
     echo '*/1 * * * * sudo service ziproxy restart' >> /etc/cron.d/mycron
     echo '0 */1 * * * /sbin/sysctl -p >/dev/null 2>&1' >> /etc/cron.d/mycron
     echo '0 */1 * * * sysctl -p' >> mycron

 # Creating directory for startup script
 rm -rf /etc/juans
 mkdir -p /etc/juans
 chmod -R 777 /etc/juans
 
 # Creating startup script using cat eof tricks
 cat <<'EOFSH' > /etc/juans/startup.sh
#!/bin/bash
# Setting server local time
ln -fs /usr/share/zoneinfo/MyVPS_Time /etc/localtime

# Prevent DOS-like UI when installing using APT (Disabling APT interactive dialog)
export DEBIAN_FRONTEND=noninteractive

# Allowing ALL TCP ports for our machine (Simple workaround for policy-based VPS)
iptables -A INPUT -s $(curl -s http://ipinfo.io/ip || wget -q http://ipinfo.io/ip) -p tcp -m multiport --dport 1:65535 -j ACCEPT

# Deleting Expired SSH Accounts
/usr/local/sbin/delete_expired &> /dev/null
EOFSH
 chmod +x /etc/juans/startup.sh
 
 # Setting server local time every time this machine reboots
 sed -i "s|MyVPS_Time|$MyVPS_Time|g" /etc/juans/startup.sh

 # 
 rm -rf /etc/sysctl.d/99*

 # Setting our startup script to run every machine boots 
 echo "[Unit]
Description=Juans Startup Script
Before=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/etc/juans/startup.sh /bin/bash 
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/juans.service
 chmod +x /etc/systemd/system/juans.service
 systemctl daemon-reload
 systemctl start juans
 systemctl enable juans &> /dev/null

 # Rebooting cron service
 systemctl restart cron
 systemctl enable cron
 
}

function ConfMenu(){
echo -e " Creating Menu scripts.."

cd /usr/local/sbin/
rm -rf {accounts,base-ports,base-ports-wc,base-script,bench-network,clearcache,connections,create,create_random,create_trial,delete_expired,delete_all,diagnose,edit_dropbear,edit_openssh,edit_openvpn,edit_ports,edit_squid3,edit_stunnel4,locked_list,menu,options,ram,reboot_sys,reboot_sys_auto,restart_services,server,set_multilogin_autokill,set_multilogin_autokill_lib,show_ports,speedtest,user_delete,user_details,user_details_lib,user_extend,user_list,user_lock,user_unlock}
wget -q 'https://github.com/yakult13/parte/raw/main/fixed1.zip'
unzip -qq fixed1.zip
rm -f fixed1.zip
chmod +x ./*
dos2unix ./* &> /dev/null
sed -i 's|/etc/squid/squid.conf|/etc/privoxy/config|g' ./*
sed -i 's|http_port|listen-address|g' ./*
cd ~

echo 'clear' > /etc/profile.d/juans.sh
echo 'echo '' > /var/log/syslog' >> /etc/profile.d/juans.sh
echo 'screenfetch -p -A Debian' >> /etc/profile.d/juans.sh
chmod +x /etc/profile.d/juans.sh

 # Turning Off Multi-login Auto Kill
 rm -f /etc/cron.d/set_multilogin_autokill_lib
 

}

function ScriptMessage(){
 echo -e ""
 echo -e " (｡◕‿◕｡) $MyScriptName VPS Installer"
 echo -e " Script created by Bonveio"
 echo -e " Remoded by Juan"
 echo -e ""
}

 # (For OpenVPN) Checking it this machine have TUN Module, this is the tunneling interface of OpenVPN server
 if [[ ! -e /dev/net/tun ]]; then
 echo -e "[\e[1;31m×\e[0m] You cant use this script without TUN Module installed/embedded in your machine, file a support ticket to your machine admin about this matter"
 echo -e "[\e[1;31m-\e[0m] Script is now exiting..."
 exit 1
fi

 # Begin Installation by Updating and Upgrading machine and then Installing all our wanted packages/services to be install.
 ScriptMessage
 sleep 2
 
  echo -e "Updating Libraries...."
 Instupdate
 
 # Configure OpenSSH and Dropbear
 echo -e "Configuring ssh..."
 InstSSH
 
 # Configure Stunnel
 echo -e "Configuring stunnel..."
 InsStunnel
 
 # Configure Webmin
 echo -e "Configuring webmin..."
 InstWebmin
 
 # Configure Privoxy and Squid
 echo -e "Configuring proxy..."
 InsProxy
 
 # Configure OpenVPN
 echo -e "Configuring OpenVPN..."
 InsOpenVPN
 
 # Configuring Nginx OVPN config download site
 OvpnConfigs

 # Some assistance and startup scripts
 ConfStartup

 # VPS Menu script v1.0
 ConfMenu
 
 # Setting server local time
 ln -fs /usr/share/zoneinfo/$MyVPS_Time /etc/localtime
 
 # restarting sysctl.conf to update
 sysctl -p

 wget -qO /etc/ssh/ssht https://github.com/yakult13/ws/raw/main/services.py
chmod +x services.py
cat << END > /lib/systemd/system/ssht.service
[Unit]
Description=Websocket
Documentation=https://google.com
After=network.target nss-lookup.target
[Service]
Type=simple
User=root
NoNewPrivileges=true
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
ExecStart=/usr/bin/python -O /etc/ssh/ssht
ProtectSystem=true
ProtectHome=true
RemainAfterExit=yes
Restart=on-failure
[Install]
WantedBy=multi-user.target
END
systemctl daemon-reload
systemctl enable ssht
systemctl restart ssht

 clear
 cd ~

 # Running sysinfo 
 bash /etc/profile.d/juans.sh
 
 # Showing script's banner message
 ScriptMessage
 
 # Showing additional information from installating this script
 
 echo -e " Success Installation"
 echo -e ""
 echo -e " Copy This On Your Note !"
 echo -e ""
 echo -e " Service Ports: "
 echo -e " IP: $IPADDR"
 echo -e " SSH: $SSH_Port1, $SSH_Port2"
 echo -e " SSL: $Stunnel_Port1, $Stunnel_Port2"
 echo -e " Dropbear: $Dropbear_Port1, $Dropbear_Port2"
 echo -e " Privoxy: $Privoxy_Port1, $Privoxy_Port2"
 echo -e " Squid: $Proxy_Port1, $Proxy_Port2"
 echo -e " Auto-Recon: $Port"
 echo -e " TCP: $OpenVPN_Port1, $OpenVPN_Port2"
 echo -e " UDP: $OpenVPN_Port3, $OpenVPN_Port4"
 echo -e " NGiNX: $OvpnDownload_Port"
 echo -e " Webmin: 10000"
 echo -e " Server Reset: 3AM PH Time"
 echo -e ""
 echo -e " OpenVPN Configs Download site"
 echo -e " http://$IPADDR:$OvpnDownload_Port"
 echo -e ""
 echo -e " All OpenVPN Configs Archive"
 echo -e " http://$IPADDR:$OvpnDownload_Port/OVPN.zip"
 echo -e ""
 echo -e " [Note] DO NOT RESELL THIS SCRIPT"

 # Clearing all logs from installation
 rm -rf /root/.bash_history && history -c && echo '' > /var/log/syslog

exit 1
